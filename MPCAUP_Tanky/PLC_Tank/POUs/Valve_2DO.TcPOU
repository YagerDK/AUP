<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.4024.13">
  <POU Name="Valve_2DO" Id="{86469f36-9490-4936-ae7d-f4831ca2b758}" SpecialFunc="None">
    <Declaration><![CDATA[FUNCTION_BLOCK Valve_2DO
VAR_INPUT
	iOpen : BOOL;
	iClose : BOOL;
	iError : BOOL;
	iSecImp : BOOL;
END_VAR
VAR_OUTPUT
	oOpen : BOOL;
	oClose : BOOL;
END_VAR

VAR_IN_OUT
	ioValStruct	 : TValve;
END_VAR

VAR
	tempOpenStartupFail : BOOL;
	tempCloseStartupFail: BOOL;
END_VAR
]]></Declaration>
    <Implementation>
      <ST><![CDATA[{region "OpenState"}
    // set real state of valve input into valve structure - input of valve can be taken from limit sensor...
    ioValStruct.State.Open := iOpen;
    ioValStruct.State.Closed := iClose;
		 

{endregion}

	 
{region "Manual/Automat"}
	// switching state of engine - automatic or manual control (default state is manual)
	
	IF ioValStruct.Cmd.AutCtrl THEN
		ioValStruct.State.AutCtrl := TRUE;
		ioValStruct.State.ManCtrl := FALSE;
	ELSE
		ioValStruct.State.AutCtrl := FALSE;
		ioValStruct.State.ManCtrl := TRUE;
	END_IF
		 
	// vynulovani obou prikazu
	ioValStruct.Cmd.AutCtrl := FALSE;
	ioValStruct.Cmd.ManCtrl := FALSE; 
			  
{endregion}
	 
{region "MayRun / MayAutoRun"}
    // setting auxilary signals (may run, may auto run) - MR AND NOT MAR - engine may be started in manual mode, MAR - engine may be started in automatic mode
    ioValStruct.State.MayRun := (ioValStruct.State.ManCtrl AND NOT(ioValStruct.State.GenErr));
	ioValStruct.State.MayAutoRun := (ioValStruct.State.AutCtrl AND NOT(ioValStruct.State.GenErr));
{endregion}
	 
{region "ManCtrl"}
	// processing manual actions - if command is processed, it is sets to FALSE even if can't be processed
    // Valve commands are open, close and stop - valve can be stopped intermediate position
	 IF ioValStruct.State.ManCtrl AND ioValStruct.State.MayRun THEN
        IF ioValStruct.Cmd.OpenMan THEN
            ioValStruct.State.CloseOut := FALSE;
            ioValStruct.State.OpenOut := TRUE;
        END_IF;
        
        IF ioValStruct.Cmd.CloseMan THEN
            ioValStruct.State.OpenOut := FALSE;
            ioValStruct.State.CloseOut := TRUE;
        END_IF;
        
        IF ioValStruct.Cmd.StopMan THEN
            ioValStruct.State.OpenOut := FALSE;
            ioValStruct.State.CloseOut := TRUE;
        END_IF;
    END_IF;
    
    ioValStruct.Cmd.OpenMan := FALSE;
    ioValStruct.Cmd.CloseMan := FALSE;
    ioValStruct.Cmd.StopMan := FALSE;
{endregion}
	 
{region "AutCtrl"}
	 //if request to run in automatic mode -> set outputs to right states if MAR
    //AutoRequest shouldn't be reseted to false state
    //if request to open and request to close are setted to 1 simultaneously - outputs should be 0.
    IF ioValStruct.State.AutCtrl AND ioValStruct.State.MayAutoRun THEN
        IF ioValStruct.Cmd.Req2CloseAut AND (NOT ioValStruct.Cmd.Req2OpenAut) THEN
            ioValStruct.State.OpenOut := FALSE;
            ioValStruct.State.CloseOut := TRUE;
        END_IF;
        
        IF (NOT ioValStruct.Cmd.Req2CloseAut) AND ioValStruct.Cmd.Req2OpenAut THEN
            ioValStruct.State.CloseOut := FALSE;
            ioValStruct.State.OpenOut := TRUE;
        END_IF;
        
        IF (NOT ioValStruct.Cmd.Req2CloseAut) AND (NOT ioValStruct.Cmd.Req2OpenAut) THEN
            ioValStruct.State.CloseOut := FALSE;
            ioValStruct.State.OpenOut := FALSE;
        END_IF;
        
    END_IF;
{endregion}
	 
{region "Error states"}
 // definition of error states 
    // error - input from digital input of plc - fyzical state of valve
    // calculating start up fail - if output is sets to open or close, it's expected feedback from limit sensor in defined time, if feedback doesn't show in this time, it should be start up fail error
    // merge of these two error is general error
    // error is both inputs (open and closed) true state
    ioValStruct.OpenFailTimer(IN := (ioValStruct.State.OpenOut AND (NOT ioValStruct.State.CloseOut)), PT := ioValStruct.Time2Open);
	tempOpenStartupFail := ioValStruct.OpenFailTimer.Q;

    ioValStruct.CloseFailTimer(IN := ((NOT ioValStruct.State.OpenOut) AND ioValStruct.State.CloseOut), PT := ioValStruct.Time2Open);
	tempCloseStartupFail := ioValStruct.CloseFailTimer.Q;
    
   
    IF tempOpenStartupFail OR tempCloseStartupFail THEN
        ioValStruct.State.StartUpFail := TRUE;
    END_IF;
    
    IF iError THEN
        ioValStruct.State.Err := TRUE;
    END_IF;
    
    ioValStruct.State.GenErr := ioValStruct.State.StartUpFail OR iError;
    
    // start up fail can be reseted by operator, command resetSUF, resets SUF and engine should be started again
    IF ioValStruct.Cmd.ResetSUF THEN
        ioValStruct.State.StartUpFail := FALSE;
        ioValStruct.Cmd.ResetSUF := FALSE;
    END_IF;
    
    // if error state exists outputs should be in stop state
    IF ioValStruct.State.GenErr THEN
        ioValStruct.State.OpenOut := FALSE;
        ioValStruct.State.CloseOut := FALSE;
    END_IF;
{endregion}
	 	 
oOpen := ioValStruct.State.OpenOut;
oClose := ioValStruct.State.CloseOut;

{region "StatusInt"}
    //write combination of states into int value for visualization (valve - combination of open, close state and error)
    IF ioValStruct.State.Open AND NOT ioValStruct.State.Closed AND NOT ioValStruct.State.GenErr THEN
        ioValStruct.State.StColor := Global.Open;
    ELSIF NOT ioValStruct.State.Open AND ioValStruct.State.Closed AND NOT ioValStruct.State.GenErr THEN
        ioValStruct.State.StColor := Global.Closed;
    ELSIF ioValStruct.State.Open AND NOT ioValStruct.State.Closed AND ioValStruct.State.GenErr THEN
        ioValStruct.State.StColor := Global.OpenAndErr;
    ELSIF NOT ioValStruct.State.Open AND ioValStruct.State.Closed AND ioValStruct.State.GenErr THEN
        ioValStruct.State.StColor := Global.ClosedAndErr;
    ELSIF NOT ioValStruct.State.Open AND NOT ioValStruct.State.Closed AND NOT ioValStruct.State.GenErr THEN
        ioValStruct.State.StColor := Global.NotOpenNotClosedNotErr;
    ELSIF NOT ioValStruct.State.Open AND NOT ioValStruct.State.Closed AND ioValStruct.State.GenErr THEN
        ioValStruct.State.StColor := Global.NotOpenNotClosedAndErr;
    ELSIF ioValStruct.State.Open AND ioValStruct.State.Closed AND ioValStruct.State.GenErr THEN
        ioValStruct.State.StColor := Global.OpenAndClosedAndErr;
    ELSIF ioValStruct.State.Open AND ioValStruct.State.Closed AND NOT ioValStruct.State.GenErr THEN
        ioValStruct.State.StColor := Global.OpenAndClosedNotErr;
    END_IF;
{endregion}]]></ST>
    </Implementation>
    <LineIds Name="Valve_2DO">
      <LineId Id="303" Count="0" />
      <LineId Id="307" Count="1" />
      <LineId Id="446" Count="0" />
      <LineId Id="467" Count="1" />
      <LineId Id="305" Count="0" />
      <LineId Id="304" Count="0" />
      <LineId Id="54" Count="0" />
      <LineId Id="9" Count="0" />
      <LineId Id="103" Count="0" />
      <LineId Id="109" Count="0" />
      <LineId Id="473" Count="9" />
      <LineId Id="471" Count="1" />
      <LineId Id="71" Count="0" />
      <LineId Id="126" Count="1" />
      <LineId Id="329" Count="0" />
      <LineId Id="132" Count="0" />
      <LineId Id="144" Count="0" />
      <LineId Id="128" Count="0" />
      <LineId Id="159" Count="1" />
      <LineId Id="164" Count="0" />
      <LineId Id="328" Count="0" />
      <LineId Id="309" Count="18" />
      <LineId Id="180" Count="0" />
      <LineId Id="161" Count="0" />
      <LineId Id="190" Count="1" />
      <LineId Id="330" Count="18" />
      <LineId Id="201" Count="0" />
      <LineId Id="192" Count="0" />
      <LineId Id="202" Count="1" />
      <LineId Id="359" Count="5" />
      <LineId Id="401" Count="0" />
      <LineId Id="405" Count="0" />
      <LineId Id="403" Count="1" />
      <LineId Id="367" Count="0" />
      <LineId Id="371" Count="9" />
      <LineId Id="383" Count="10" />
      <LineId Id="351" Count="0" />
      <LineId Id="349" Count="0" />
      <LineId Id="204" Count="0" />
      <LineId Id="407" Count="0" />
      <LineId Id="281" Count="0" />
      <LineId Id="408" Count="0" />
      <LineId Id="259" Count="0" />
      <LineId Id="409" Count="16" />
      <LineId Id="262" Count="0" />
      <LineId Id="260" Count="0" />
    </LineIds>
  </POU>
</TcPlcObject>