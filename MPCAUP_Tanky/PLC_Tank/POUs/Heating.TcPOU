<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.4024.13">
  <POU Name="Heating" Id="{67bfd793-3f9c-4f6b-ac3b-8ac7d5e1f5d7}" SpecialFunc="None">
    <Declaration><![CDATA[FUNCTION_BLOCK Heating
VAR_INPUT
	diEnabled : BOOL;
	iSecImp : BOOL;
END_VAR
VAR_OUTPUT
	doEnabled : BOOL;
END_VAR
VAR_IN_OUT
	HeatingPhase : TPhaseHeating;
	Heater : THeater;
END_VAR
VAR
	pidParameters : ST_CTRL_PID_PARAMS;
	ElapsedTime: INT;
	iR_TRIG : R_TRIG;
END_VAR
]]></Declaration>
    <Implementation>
      <ST><![CDATA[iSecImp := Global.secImp; 

{region "Aut/Man"}
    // switching state of engine - automatic or manual control (default state is manual)
IF HeatingPhase.Cmd.AutCtrl THEN
    HeatingPhase.State.AutCtrl := TRUE;
    HeatingPhase.State.ManCtrl := FALSE;
    Heater.Cmd.AutCtrl := TRUE;
END_IF;

IF HeatingPhase.Cmd.ManCtrl THEN
    HeatingPhase.State.ManCtrl := TRUE;
    HeatingPhase.State.AutCtrl := FALSE;
    Heater.Cmd.ManCtrl := TRUE;
END_IF;

IF NOT HeatingPhase.State.AutCtrl AND NOT HeatingPhase.State.ManCtrl THEN
    HeatingPhase.State.ManCtrl := TRUE;
END_IF;

// Reset příkazů
HeatingPhase.Cmd.AutCtrl := FALSE;
HeatingPhase.Cmd.ManCtrl := FALSE;
{endregion}

{region "ManCtrl"}
    // processing manual actions - if command is processed, it is sets to FALSE even if can't be processed
        // real states of phase are writed into states in phase structure
IF HeatingPhase.State.ManCtrl THEN
    IF HeatingPhase.Cmd.StartMan AND HeatingPhase.State.Idle THEN
        HeatingPhase.State.Running := TRUE;
        HeatingPhase.State.Idle := FALSE;
        HeatingPhase.State.Paused := FALSE;
        HeatingPhase.State.Done := FALSE;
        Heater.Cmd.TurnOnMan := TRUE;
    END_IF;

    IF HeatingPhase.Cmd.PauseMan AND HeatingPhase.State.Running THEN
        HeatingPhase.State.Paused := TRUE;
        HeatingPhase.State.Running := FALSE;
        Heater.Cmd.TurnOffMan := TRUE;
    END_IF;

    IF HeatingPhase.Cmd.ResumeMan AND HeatingPhase.State.Paused THEN
        HeatingPhase.State.Running := TRUE;
        HeatingPhase.State.Paused := FALSE;
        Heater.Cmd.TurnOnMan := TRUE;
    END_IF;

    IF HeatingPhase.Cmd.StopMan AND (HeatingPhase.State.Running OR HeatingPhase.State.Paused) THEN
        HeatingPhase.State.Idle := TRUE;
        HeatingPhase.State.Paused := FALSE;
        HeatingPhase.State.Running := FALSE;
        HeatingPhase.State.Done := FALSE;
        Heater.Cmd.TurnOffMan := TRUE;
    END_IF;

    HeatingPhase.Cmd.StartMan := FALSE;
    HeatingPhase.Cmd.PauseMan := FALSE;
    HeatingPhase.Cmd.ResumeMan := FALSE;
    HeatingPhase.Cmd.StopMan := FALSE;
END_IF;
{endregion}

{region "AutCtrl"}
    // if request to run in automatic mode -> set auto request to heat to 1, if not request to heat 0
    // commands should be sets to false after their processing
  
IF HeatingPhase.State.AutCtrl THEN
    IF HeatingPhase.Cmd.StartAut AND HeatingPhase.State.Idle THEN
        HeatingPhase.State.Running := TRUE;
        HeatingPhase.State.Idle := FALSE;
        Heater.Cmd.Req2RunAutCtrl := TRUE;
    END_IF;

    IF HeatingPhase.Cmd.StopAut AND HeatingPhase.State.Running THEN
        HeatingPhase.State.Idle := TRUE;
        HeatingPhase.State.Running := FALSE;
        Heater.Cmd.Req2RunAutCtrl := FALSE;
    END_IF;

    HeatingPhase.Cmd.StartAut := FALSE;
    HeatingPhase.Cmd.StopAut := FALSE;
END_IF;
{endregion}

{region "Done"}
   //every phase should have finish condition - heating phase - if water temp is on requested value for 15 seconds with 1°C hysteresis
    //after that done state should be setted to 1
    // command reset done resets done state and than resets command
iR_TRIG(CLK := Global.secImp);

IF iR_TRIG.Q THEN
    IF HeatingPhase.State.Idle THEN
        ElapsedTime := 0;
    ELSIF HeatingPhase.State.Running THEN
        IF ((HeatingPhase.WaterTemp - HeatingPhase.ParamReqTemp)) >= -5 AND ((HeatingPhase.WaterTemp - HeatingPhase.ParamReqTemp) <= 5) THEN
            ElapsedTime := ElapsedTime + 1;
        ELSE
            ElapsedTime := 0;
        END_IF;
    END_IF;
END_IF;

IF ElapsedTime >= Global.timeReqOnTemp THEN
    HeatingPhase.State.Done := TRUE;
    HeatingPhase.State.Running := FALSE;
    HeatingPhase.State.Idle := TRUE;
END_IF;

IF HeatingPhase.Cmd.ResetDone THEN
    HeatingPhase.State.Done := FALSE;
    HeatingPhase.Cmd.ResetDone := FALSE;
    ElapsedTime := 0;
END_IF;
{endregion}

{region "States"}
    //Command valve in cases of states
    // Running - start heating  
    // Idle - stop heating
    // Pause - stop heating (alternative is hold actual temp)
IF HeatingPhase.State.Running THEN
    Heater.Cmd.Req2RunAutCtrl := TRUE;
    Heater.ParamHeatingSetPointAutomat := HeatingPhase.ParamReqTemp;
END_IF;

IF HeatingPhase.State.Idle OR HeatingPhase.State.Paused THEN
    Heater.Cmd.Req2RunAutCtrl := FALSE;
END_IF;
{endregion}

// delault state of phase - if not any state sets state to idle
IF NOT HeatingPhase.State.Idle AND NOT HeatingPhase.State.Paused AND NOT HeatingPhase.State.Running THEN
    HeatingPhase.State.Idle := TRUE;
END_IF;

doEnabled := diEnabled;
]]></ST>
    </Implementation>
    <LineIds Name="Heating">
      <LineId Id="826" Count="25" />
      <LineId Id="973" Count="0" />
      <LineId Id="852" Count="37" />
      <LineId Id="974" Count="1" />
      <LineId Id="890" Count="19" />
      <LineId Id="980" Count="1" />
      <LineId Id="910" Count="28" />
      <LineId Id="985" Count="2" />
      <LineId Id="939" Count="16" />
      <LineId Id="9" Count="0" />
    </LineIds>
  </POU>
</TcPlcObject>