<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.4024.13">
  <POU Name="Heating" Id="{67bfd793-3f9c-4f6b-ac3b-8ac7d5e1f5d7}" SpecialFunc="None">
    <Declaration><![CDATA[FUNCTION_BLOCK Heating
VAR_INPUT
	diEnabled : BOOL;
	iSecImp : BOOL;
END_VAR
VAR_OUTPUT
	doEnabled : BOOL;
END_VAR
VAR_IN_OUT
	HeatingPhase : TPhaseHeating;
	Heater : THeater;
END_VAR
VAR
	pidParameters : ST_CTRL_PID_PARAMS;
	ElapsedTime: INT;
	iR_TRIG : R_TRIG;
END_VAR
]]></Declaration>
    <Implementation>
      <ST><![CDATA[{region "Aut/Man"}
    // switching state of engine - automatic or manual control (default state is manual)

	 IF NOT HeatingPhase.Cmd.AutCtrl AND NOT HeatingPhase.Cmd.ManCtrl THEN
		HeatingPhase.State.ManCtrl := TRUE;
		HeatingPhase.State.AutCtrl := FALSE;
	END_IF;
		  
	IF HeatingPhase.Cmd.AutCtrl THEN
		HeatingPhase.State.AutCtrl := TRUE;
		HeatingPhase.State.ManCtrl := FALSE;
	END_IF;
	
	IF HeatingPhase.Cmd.ManCtrl THEN
		HeatingPhase.State.ManCtrl := TRUE;
		HeatingPhase.State.AutCtrl := FALSE;
	END_IF;
	
	
	 
{endregion}

{region "ManCtrl"}
    // processing manual actions - if command is processed, it is sets to FALSE even if can't be processed
        // real states of phase are writed into states in phase structure
	IF HeatingPhase.State.ManCtrl THEN
		IF HeatingPhase.Cmd.StartMan AND HeatingPhase.State.Idle THEN
			HeatingPhase.State.Running := TRUE;
			HeatingPhase.State.Idle := FALSE;
			HeatingPhase.State.Done := FALSE;
			HeatingPhase.State.Paused := FALSE;
		END_IF;
	
		IF HeatingPhase.Cmd.PauseMan AND HeatingPhase.State.Running THEN
			HeatingPhase.State.Running := FALSE;
			HeatingPhase.State.Idle := FALSE;
			HeatingPhase.State.Done := FALSE;
			HeatingPhase.State.Paused := TRUE;
		END_IF;
	
		IF HeatingPhase.Cmd.ResumeMan AND HeatingPhase.State.Paused THEN
			HeatingPhase.State.Running := TRUE;
			HeatingPhase.State.Idle := FALSE;
			HeatingPhase.State.Done := FALSE;
			HeatingPhase.State.Paused := FALSE;
		END_IF;
	
		IF HeatingPhase.Cmd.StopMan AND (HeatingPhase.State.Paused OR HeatingPhase.State.Running) THEN
			HeatingPhase.State.Running := FALSE;
			HeatingPhase.State.Idle := TRUE;
			HeatingPhase.State.Done := FALSE;
			HeatingPhase.State.Paused := FALSE;
		END_IF;
	
		HeatingPhase.Cmd.StartMan := FALSE;
		HeatingPhase.Cmd.PauseMan := FALSE;
		HeatingPhase.Cmd.ResumeMan := FALSE;
		HeatingPhase.Cmd.StopMan := FALSE;
	END_IF;
   
{endregion}

{region "AutCtrl"}
    // if request to run in automatic mode -> set auto request to heat to 1, if not request to heat 0
    // commands should be sets to false after their processing
	IF HeatingPhase.State.AutCtrl THEN
		IF HeatingPhase.Cmd.StartAut AND HeatingPhase.State.Idle THEN
			HeatingPhase.State.Idle := FALSE;
			HeatingPhase.State.Running := TRUE;
			HeatingPhase.State.Done := FALSE;
		END_IF;
	
		IF HeatingPhase.Cmd.StopAut AND HeatingPhase.State.Running THEN
			HeatingPhase.State.Idle := TRUE;
			HeatingPhase.State.Running := FALSE;
			HeatingPhase.State.Done := FALSE;
		END_IF;
	
		HeatingPhase.Cmd.StartAut := FALSE;
		HeatingPhase.Cmd.StopAut := FALSE;
	END_IF;
{endregion}

{region "Done"}
    //every phase should have finish condition - heating phase - if water temp is on requested value for 15 seconds with 1°C hysteresis
    //after that done state should be setted to 1
	iR_TRIG(CLK := Global.secImp);


	IF iR_TRIG.Q THEN
		IF HeatingPhase.State.Idle THEN
			ElapsedTime := 0; // Reset elapsed time if phase is idle
		ELSIF HeatingPhase.State.Running THEN
			IF ABS(HeatingPhase.WaterTemp - HeatingPhase.ParamReqTemp) <= 1.0 THEN
				ElapsedTime := ElapsedTime + 1;
			ELSE
				ElapsedTime := 0;
			END_IF;
		END_IF;
	END_IF;

	IF ElapsedTime >= 15 THEN
		HeatingPhase.State.Done := TRUE;
		HeatingPhase.State.Running := FALSE; 
		HeatingPhase.State.Idle := TRUE;
	END_IF;

	IF HeatingPhase.Cmd.ResetDone THEN
		HeatingPhase.State.Done := FALSE;
		HeatingPhase.Cmd.ResetDone := FALSE;
		ElapsedTime := 0; 
	END_IF;

   
  
{endregion}

{region "States"}
    //Command valve in cases of states
    // Running - start heating  
    // Idle - stop heating
    // Pause - stop heating (alternative is hold actual temp)
  	IF HeatingPhase.State.Running OR HeatingPhase.State.Paused THEN
		Heater.Cmd.Req2RunAutCtrl := TRUE;
		Heater.ParamHeatingSetPointAutomat := HeatingPhase.ParamReqTemp;
	END_IF;
	
	IF HeatingPhase.State.Idle THEN
		Heater.Cmd.Req2RunAutCtrl := FALSE;
	END_IF;
		 
	IF NOT (HeatingPhase.State.Idle OR HeatingPhase.State.Paused OR HeatingPhase.State.Running) THEN
    HeatingPhase.State.Idle := TRUE;
END_IF;


{endregion}

// delault state of phase - if not any state sets state to idle
IF NOT HeatingPhase.State.Idle AND NOT HeatingPhase.State.Paused AND NOT HeatingPhase.State.Running THEN
    HeatingPhase.State.Idle := 1;
END_IF;

doEnabled := diEnabled;]]></ST>
    </Implementation>
    <LineIds Name="Heating">
      <LineId Id="72" Count="1" />
      <LineId Id="345" Count="0" />
      <LineId Id="347" Count="2" />
      <LineId Id="328" Count="0" />
      <LineId Id="346" Count="0" />
      <LineId Id="330" Count="2" />
      <LineId Id="334" Count="4" />
      <LineId Id="340" Count="1" />
      <LineId Id="329" Count="0" />
      <LineId Id="86" Count="5" />
      <LineId Id="350" Count="4" />
      <LineId Id="377" Count="0" />
      <LineId Id="355" Count="2" />
      <LineId Id="378" Count="2" />
      <LineId Id="358" Count="0" />
      <LineId Id="360" Count="2" />
      <LineId Id="381" Count="2" />
      <LineId Id="363" Count="0" />
      <LineId Id="365" Count="2" />
      <LineId Id="384" Count="2" />
      <LineId Id="370" Count="6" />
      <LineId Id="92" Count="0" />
      <LineId Id="122" Count="5" />
      <LineId Id="387" Count="7" />
      <LineId Id="401" Count="1" />
      <LineId Id="395" Count="0" />
      <LineId Id="397" Count="3" />
      <LineId Id="141" Count="5" />
      <LineId Id="475" Count="6" />
      <LineId Id="483" Count="6" />
      <LineId Id="491" Count="5" />
      <LineId Id="498" Count="4" />
      <LineId Id="275" Count="2" />
      <LineId Id="170" Count="7" />
      <LineId Id="403" Count="6" />
      <LineId Id="183" Count="0" />
      <LineId Id="410" Count="0" />
      <LineId Id="412" Count="3" />
      <LineId Id="411" Count="0" />
      <LineId Id="184" Count="2" />
      <LineId Id="281" Count="1" />
      <LineId Id="189" Count="0" />
      <LineId Id="204" Count="0" />
      <LineId Id="9" Count="0" />
    </LineIds>
  </POU>
</TcPlcObject>