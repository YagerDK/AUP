<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.4024.13">
  <POU Name="Engine_1DO" Id="{09f1d056-13ec-4f90-a65d-afcf9d2cd229}" SpecialFunc="None">
    <Declaration><![CDATA[FUNCTION_BLOCK Engine_1DO
VAR_INPUT
	iRunning : BOOL;
	iError : BOOL;
	iSecImp : BOOL;
END_VAR
VAR_OUTPUT
	oRun : BOOL;
END_VAR
VAR_IN_OUT
	ioEngStruct : TEngine;
END_VAR
VAR
	secImpEdge: BOOL;
	tempStartupFail: BOOL;
	
	rtrig : R_TRIG;
	timeToStartTON : TON;
END_VAR

VAR PERSISTENT
    totalRT : INT; 
END_VAR]]></Declaration>
    <Implementation>
      <ST><![CDATA[{region "RunState"}
   
		ioEngStruct.State.Run := iRunning;	
	

{endregion}

{region "Running time"} 
    // counting running time of engine - (motoseconds in real situation it should be moto hours)
    // detection rising edge of input secimp - should be conected 1Hz internal clock from PLC
	rtrig(CLK := iSecImp);
		
	IF iRunning AND rtrig.Q THEN
    	totalRT := totalRT + 1;
	END_IF;
		 
	ioEngStruct.State.RT := totalRT;

	 
	IF ioEngStruct.Cmd.SetRT >= 0 THEN
		ioEngStruct.State.RT := ioEngStruct.Cmd.SetRT; // Nastavení počtu motosekund
		ioEngStruct.Cmd.SetRT := -1;                  // Reset uživatelského nastavení
	END_IF
{endregion}
	 
 
{region "Manual/Automat"}
	// switching state of engine - automatic or manual control (default state is manual)
	// pokud je command automat, tak automat, jinak manual
	
			  
	IF ioEngStruct.Cmd.AutCtrl THEN
		ioEngStruct.State.AutCtrl := TRUE;
		ioEngStruct.State.ManCtrl := FALSE;	 
	END_IF
		 
	IF ioEngStruct.Cmd.ManCtrl THEN
		ioEngStruct.State.AutCtrl := FALSE;
		ioEngStruct.State.ManCtrl := TRUE;
	END_IF;
		 
	IF NOT ioEngStruct.State.AutCtrl AND NOT ioEngStruct.State.ManCtrl THEN
		ioEngStruct.State.ManCtrl := TRUE;
		ioEngStruct.State.AutCtrl := FALSE;
	END_IF;
		 
	// vynulovani obou prikazu
	ioEngStruct.Cmd.AutCtrl := FALSE;
	ioEngStruct.Cmd.ManCtrl := FALSE;
{endregion}
	 
{region "MayRun / MayAutoRun"}
	// setting auxilary signals (may run, may auto run) - MR AND NOT MAR - eng should be started in manual mode,
    // MAR - should be started in automatic mode
    ioEngStruct.State.MayRun := (ioEngStruct.State.ManCtrl AND NOT(ioEngStruct.State.GenErr));
	ioEngStruct.State.MayAutoRun := (ioEngStruct.State.AutCtrl AND NOT(ioEngStruct.State.GenErr));
		 
			  
{endregion}
	 
{region "ManCtrl"}
	// processing manual actions - if command is processed, it is set to FALSE even if can't be processed
    // Engine commands are turn off (stop) and turn on (start)
		 
	// pokud je manualni rezim a dostaneme prikaz TurnOnMan, tak se nastavi RunOut (a analogicky pro turn off)		  
	IF ioEngStruct.Cmd.TurnOnMan AND ioEngStruct.State.MayRun THEN		  
		ioEngStruct.State.RunOut := TRUE;	
		ioEngStruct.Cmd.TurnOnMan := FALSE;	 
	END_IF
		 
	IF ioEngStruct.Cmd.TurnOffMan AND ioEngStruct.State.MayRun THEN
		ioEngStruct.State.RunOut := FALSE;
		ioEngStruct.Cmd.TurnOffMan := FALSE;
	END_IF
	
{endregion}
	 
{region "AutCtrl"}
	//if request to run in automatic mode set outputs to right states if MAR
    //AutoRequest shouldn't be reseted to false state
    IF ioEngStruct.State.MayAutoRun AND ioEngStruct.State.AutCtrl THEN
		ioEngStruct.State.RunOut := ioEngStruct.Cmd.Req2RunAutCtrl;
	END_IF
		 
			  						  
									   
{endregion}
	 
{region "Error states"}
	// definition of error states 
	// error - input from digital input of plc - fyzical state of engine 
	// calculating start up fail - if output is sets to start engine, it's expected feedback from running signal in defined time, if feedback doesn't show in this time, it should be start up fail error
	// merge of these two error is general error
	
	timeToStartTON(
    IN := ioEngStruct.State.RunOut, // Vstup časovače (výstup zařízení)
    PT := ioEngStruct.Time2Start    // Časový limit pro zpětnou vazbu	
	);	 
			  
	IF timeToStartTON.Q AND NOT ioEngStruct.State.Run THEN
    ioEngStruct.State.StartUpFail := TRUE;
	ELSE
		ioEngStruct.State.StartUpFail := FALSE;
	END_IF;
			  
	IF iError THEN	
		ioEngStruct.State.Err := TRUE;
	END_IF;	


	IF ioEngStruct.State.Err AND ioEngStruct.State.StartUpFail THEN
			 ioEngStruct.State.GenErr := TRUE;
	END_IF;
		 
	IF ioEngStruct.Cmd.ResetSUF THEN
		ioEngStruct.State.StartUpFail := TRUE;
		ioEngStruct.Cmd.ResetSUF := FALSE;
	END_IF;
		 
	IF ioEngStruct.State.GenErr THEN
			 ioEngStruct.State.RunOut := FALSE;
	END_IF;




	   
{endregion}
	 
oRun := ioEngStruct.State.RunOut;

{region "StatusInt"}
 IF NOT ioEngStruct.State.GenErr THEN
        IF ioEngStruct.State.Run THEN
            ioEngStruct.State.StateInt := Global.Running;
        ELSE
            ioEngStruct.State.StateInt := Global.Stop;
        END_IF;
    ELSE
        IF ioEngStruct.State.Run THEN
            ioEngStruct.State.StateInt := Global.RunningAndError;
        ELSE

            ioEngStruct.State.StateInt := Global.Err;
        END_IF;
    END_IF; 
{endregion}]]></ST>
    </Implementation>
    <LineIds Name="Engine_1DO">
      <LineId Id="1114" Count="145" />
      <LineId Id="260" Count="0" />
    </LineIds>
  </POU>
</TcPlcObject>