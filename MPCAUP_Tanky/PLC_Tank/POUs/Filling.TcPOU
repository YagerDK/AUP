<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.4024.13">
  <POU Name="Filling" Id="{9d4dcb01-ad56-4326-9456-8cd473ff054e}" SpecialFunc="None">
    <Declaration><![CDATA[FUNCTION_BLOCK Filling
VAR_INPUT
    diEnabled : BOOL; // Aktivace fáze
END_VAR
VAR_OUTPUT
    doEnabled : BOOL; // Výstupní povolení fáze
END_VAR
VAR_IN_OUT
    FillingPhase : TPhaseFilling; // Struktura fáze napouštění
    FillingValve : TValve;       // Struktura ventilu
END_VAR
VAR

END_VAR]]></Declaration>
    <Implementation>
      <ST><![CDATA[{region "REGION Aut/Man"}
    // switching state of engine - automatic or manual control (default state is manual)
	IF FillingPhase.Cmd.AutCtrl THEN
			FillingPhase.State.AutCtrl := TRUE;
        	FillingPhase.State.ManCtrl := FALSE;
			FillingValve.Cmd.AutCtrl := TRUE;
        	//FillingPhase.Cmd.AutCtrl := FALSE; //mozna navic
    	END_IF;
    IF FillingPhase.Cmd.ManCtrl THEN
			FillingPhase.State.ManCtrl := TRUE;
        	FillingPhase.State.AutCtrl := FALSE;
			FillingValve.Cmd.ManCtrl := TRUE;
       		//FillingPhase.Cmd.ManCtrl := FALSE; //mozna navic
    END_IF;
    IF NOT FillingPhase.State.AutCtrl AND NOT FillingPhase.State.ManCtrl THEN
        		FillingPhase.State.ManCtrl := TRUE;
   		END_IF;

{endregion}

{region "ManCtrl"}
    // processing manual actions - if command is processed, it is sets to FALSE even if can't be processed
    // Phase commands are start, stop, pause and resume 
    // Start - open filling valve 
    // Stop - close filling valve
    // Pause - close filling valve
    // Resume - open filling valve
    // real states of phase are writed into states in phase structure
		 
	IF FillingPhase.State.ManCtrl THEN
         IF FillingPhase.Cmd.StartMan AND FillingPhase.State.Idle THEN
             	FillingPhase.State.Running := TRUE;
				FillingPhase.State.Paused := FALSE;
             	FillingPhase.State.Idle := FALSE;
            	FillingPhase.State.Done := FALSE;
        	 END_IF;
         IF FillingPhase.Cmd.PauseMan AND FillingPhase.State.Running THEN
            	 FillingPhase.State.Paused := TRUE;
            	 FillingPhase.State.Running := FALSE;
				 FillingPhase.State.Idle := FALSE;
            	 FillingPhase.State.Done := FALSE;
         END_IF;
         IF FillingPhase.Cmd.ResumeMan AND FillingPhase.State.Paused THEN
             	FillingPhase.State.Running := TRUE;
             	FillingPhase.State.Paused := FALSE;
             	FillingPhase.State.Done := FALSE;
        	 END_IF;
         IF FillingPhase.Cmd.StopMan AND (FillingPhase.State.Paused OR FillingPhase.State.Running) THEN
             	FillingPhase.State.Idle := TRUE;
             	FillingPhase.State.Paused := FALSE;
             	FillingPhase.State.Running := FALSE;
             	FillingPhase.State.Done := FALSE;
        	 END_IF;
         FillingPhase.Cmd.StartMan := FALSE;
         FillingPhase.Cmd.PauseMan := FALSE;
         FillingPhase.Cmd.ResumeMan := FALSE;
         FillingPhase.Cmd.StopMan := FALSE;
     END_IF;		 
	
   
{endregion}

{region "AutCtrl"}
    // if request to run in automatic mode and phase can be run in automatic mode switch phase to running
     IF FillingPhase.State.AutCtrl THEN
        IF FillingPhase.Cmd.StartAut AND FillingPhase.State.Idle THEN
            	FillingPhase.State.Running := TRUE;
           	 	FillingPhase.State.Idle := FALSE;
       		 END_IF;
        IF FillingPhase.Cmd.StopAut AND FillingPhase.State.Running THEN
            	FillingPhase.State.Idle := TRUE;
            	FillingPhase.State.Running := FALSE;
       		 END_IF;
        FillingPhase.Cmd.StartAut := FALSE;
        FillingPhase.Cmd.StopAut := FALSE;
    END_IF;
{endregion}

{region "Done"}
    //every phase should have finish condition - filling phase - if water level is above requested level
    //after that done state should be setted to 1
   IF FillingPhase.WaterLevel >= FillingPhase.ParamFillLevel THEN
        	FillingPhase.Cmd.StopAut := TRUE;
			FillingPhase.Cmd.StopMan := TRUE;
        	FillingPhase.State.Done := TRUE;
    END_IF;
    // command reset done resets done state and than resets command
    IF FillingPhase.Cmd.ResetDone THEN
        	FillingPhase.State.Done := FALSE;
        	FillingPhase.Cmd.ResetDone := FALSE;
    END_IF;
{endregion}

{region "States"} 
    //Command valve in cases of states
	IF FillingPhase.State.Running THEN
			//FillingValve.Cmd.AutCtrl := TRUE;
			FillingValve.Cmd.OpenMan := TRUE;
			FillingValve.Cmd.CloseMan := FALSE;	 
        	FillingValve.Cmd.Req2OpenAut := TRUE;
        	FillingValve.Cmd.Req2CloseAut := FALSE;
    END_IF;
    IF FillingPhase.State.Idle OR FillingPhase.State.Paused THEN
			FillingValve.Cmd.OpenMan := FALSE;
			FillingValve.Cmd.CloseMan := TRUE;	
        	FillingValve.Cmd.Req2CloseAut := TRUE;
        	FillingValve.Cmd.Req2OpenAut := FALSE;
    END_IF;
{endregion}


// delault state of phase - if not any state sets state to idle
IF NOT FillingPhase.State.Idle AND NOT FillingPhase.State.Paused AND NOT FillingPhase.State.Running THEN
    FillingPhase.State.Idle := 1;
END_IF;

// write binary states into int value for visualization
IF FillingPhase.State.Idle THEN
    FillingPhase.State.Stateint := Global.PhIdle;
ELSIF FillingPhase.State.Running THEN
    FillingPhase.State.Stateint := Global.PhRunning;
ELSE
    FillingPhase.State.Stateint := Global.PhPause;
END_IF;

// Ponechte pro moznost retezeni volani bloku v LAD
doEnabled := diEnabled;]]></ST>
    </Implementation>
    <LineIds Name="Filling">
      <LineId Id="789" Count="1" />
      <LineId Id="846" Count="0" />
      <LineId Id="859" Count="0" />
      <LineId Id="848" Count="0" />
      <LineId Id="1021" Count="0" />
      <LineId Id="849" Count="2" />
      <LineId Id="999" Count="0" />
      <LineId Id="852" Count="0" />
      <LineId Id="1022" Count="0" />
      <LineId Id="853" Count="0" />
      <LineId Id="855" Count="3" />
      <LineId Id="791" Count="11" />
      <LineId Id="929" Count="2" />
      <LineId Id="1036" Count="0" />
      <LineId Id="932" Count="5" />
      <LineId Id="1037" Count="0" />
      <LineId Id="938" Count="16" />
      <LineId Id="803" Count="0" />
      <LineId Id="809" Count="5" />
      <LineId Id="955" Count="10" />
      <LineId Id="815" Count="5" />
      <LineId Id="1001" Count="0" />
      <LineId Id="967" Count="0" />
      <LineId Id="1002" Count="0" />
      <LineId Id="969" Count="5" />
      <LineId Id="821" Count="4" />
      <LineId Id="975" Count="0" />
      <LineId Id="998" Count="0" />
      <LineId Id="1051" Count="0" />
      <LineId Id="1053" Count="0" />
      <LineId Id="1052" Count="0" />
      <LineId Id="977" Count="2" />
      <LineId Id="1054" Count="1" />
      <LineId Id="980" Count="1" />
      <LineId Id="826" Count="18" />
      <LineId Id="9" Count="0" />
    </LineIds>
  </POU>
</TcPlcObject>